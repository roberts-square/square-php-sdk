<?php

declare(strict_types=1);

namespace Square\Models;

use stdClass;

/**
 * Represents the details of a webhook subscription filter.
 */
class WebhookSubscriptionFilter implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $authType;

    /**
     * @var string|null
     */
    private $filterType;

    /**
     * @var string|null
     */
    private $filterAction;

    /**
     * @var string|null
     */
    private $createdAt;

    /**
     * @var string|null
     */
    private $updatedAt;

    /**
     * Returns Id.
     * Unique ID for this subscription filter. Generated by Square.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique ID for this subscription filter. Generated by Square.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Auth Type.
     * Indicates how to verify the authorization of a filter.
     */
    public function getAuthType(): ?string
    {
        return $this->authType;
    }

    /**
     * Sets Auth Type.
     * Indicates how to verify the authorization of a filter.
     *
     * @maps auth_type
     */
    public function setAuthType(?string $authType): void
    {
        $this->authType = $authType;
    }

    /**
     * Returns Filter Type.
     * Indicates how a webhook subscription is filtered.
     */
    public function getFilterType(): ?string
    {
        return $this->filterType;
    }

    /**
     * Sets Filter Type.
     * Indicates how a webhook subscription is filtered.
     *
     * @maps filter_type
     */
    public function setFilterType(?string $filterType): void
    {
        $this->filterType = $filterType;
    }

    /**
     * Returns Filter Action.
     * Indicates whether the filter will use the joined values as an allow list or disallow list.
     */
    public function getFilterAction(): ?string
    {
        return $this->filterAction;
    }

    /**
     * Sets Filter Action.
     * Indicates whether the filter will use the joined values as an allow list or disallow list.
     *
     * @maps filter_action
     */
    public function setFilterAction(?string $filterAction): void
    {
        $this->filterAction = $filterAction;
    }

    /**
     * Returns Created At.
     * Timestamp indicating the time at which this subscription filter was created.
     * In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
     */
    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     * Timestamp indicating the time at which this subscription filter was created.
     * In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
     *
     * @maps created_at
     */
    public function setCreatedAt(?string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     * Timestamp indicating the time at which this subscription filter was updated.
     * In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
     */
    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     * Timestamp indicating the time at which this subscription filter was updated.
     * In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
     *
     * @maps updated_at
     */
    public function setUpdatedAt(?string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->authType)) {
            $json['auth_type']     = $this->authType;
        }
        if (isset($this->filterType)) {
            $json['filter_type']   = $this->filterType;
        }
        if (isset($this->filterAction)) {
            $json['filter_action'] = $this->filterAction;
        }
        if (isset($this->createdAt)) {
            $json['created_at']    = $this->createdAt;
        }
        if (isset($this->updatedAt)) {
            $json['updated_at']    = $this->updatedAt;
        }
        $json = array_filter($json, function ($val) {
            return $val !== null;
        });

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
