<?php

declare(strict_types=1);

namespace Square\Models;

use stdClass;

/**
 * Represents a Square seller account created by the Accounts API.
 */
class Account implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var int|null
     */
    private $version;

    /**
     * @var string
     */
    private $countryCode;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $legalEntityId;

    /**
     * @var string|null
     */
    private $creatorId;

    /**
     * @param string $countryCode
     */
    public function __construct(string $countryCode)
    {
        $this->countryCode = $countryCode;
    }

    /**
     * Returns Id.
     * Unique ID generated by Square.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique ID generated by Square.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Version.
     * The version of the `Account`.
     */
    public function getVersion(): ?int
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The version of the `Account`.
     *
     * @maps version
     */
    public function setVersion(?int $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Country Code.
     * Indicates the country associated with another entity, such as a business.
     * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
     */
    public function getCountryCode(): string
    {
        return $this->countryCode;
    }

    /**
     * Sets Country Code.
     * Indicates the country associated with another entity, such as a business.
     * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
     *
     * @required
     * @maps country_code
     */
    public function setCountryCode(string $countryCode): void
    {
        $this->countryCode = $countryCode;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Legal Entity Id.
     * The ID of `LegalEntity` for this account. See `LegalEntity`.
     */
    public function getLegalEntityId(): ?string
    {
        return $this->legalEntityId;
    }

    /**
     * Sets Legal Entity Id.
     * The ID of `LegalEntity` for this account. See `LegalEntity`.
     *
     * @maps legal_entity_id
     */
    public function setLegalEntityId(?string $legalEntityId): void
    {
        $this->legalEntityId = $legalEntityId;
    }

    /**
     * Returns Creator Id.
     * Identifies the developer account that created this seller account.
     * Populated only for accounts created with the CreateAccount endpoint.
     */
    public function getCreatorId(): ?string
    {
        return $this->creatorId;
    }

    /**
     * Sets Creator Id.
     * Identifies the developer account that created this seller account.
     * Populated only for accounts created with the CreateAccount endpoint.
     *
     * @maps creator_id
     */
    public function setCreatorId(?string $creatorId): void
    {
        $this->creatorId = $creatorId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']              = $this->id;
        }
        if (isset($this->version)) {
            $json['version']         = $this->version;
        }
        $json['country_code']        = $this->countryCode;
        if (isset($this->status)) {
            $json['status']          = $this->status;
        }
        if (isset($this->legalEntityId)) {
            $json['legal_entity_id'] = $this->legalEntityId;
        }
        if (isset($this->creatorId)) {
            $json['creator_id']      = $this->creatorId;
        }
        $json = array_filter($json, function ($val) {
            return $val !== null;
        });

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
