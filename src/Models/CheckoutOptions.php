<?php

declare(strict_types=1);

namespace Square\Models;

use stdClass;

class CheckoutOptions implements \JsonSerializable
{
    /**
     * @var Money
     */
    private $amountMoney;

    /**
     * @var string|null
     */
    private $referenceId;

    /**
     * @var string|null
     */
    private $note;

    /**
     * @var string|null
     */
    private $orderId;

    /**
     * @var PaymentOptions|null
     */
    private $paymentOptions;

    /**
     * @var TerminalDeviceCheckoutOptions
     */
    private $deviceOptions;

    /**
     * @var string[]|null
     */
    private $paymentIds;

    /**
     * @var string|null
     */
    private $paymentType;

    /**
     * @var AuxiliaryInfo[]|null
     */
    private $auxiliaryInfo;

    /**
     * @var string[]|null
     */
    private $revenueAssociationTags;

    /**
     * @var string|null
     */
    private $teamMemberId;

    /**
     * @var string|null
     */
    private $customerId;

    /**
     * @var string|null
     */
    private $cancelReasonDeprecated;

    /**
     * @var Money|null
     */
    private $appFeeMoney;

    /**
     * @param Money $amountMoney
     * @param TerminalDeviceCheckoutOptions $deviceOptions
     */
    public function __construct(Money $amountMoney, TerminalDeviceCheckoutOptions $deviceOptions)
    {
        $this->amountMoney = $amountMoney;
        $this->deviceOptions = $deviceOptions;
    }

    /**
     * Returns Amount Money.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-
     * monetary-amounts)
     * for more information.
     */
    public function getAmountMoney(): Money
    {
        return $this->amountMoney;
    }

    /**
     * Sets Amount Money.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-
     * monetary-amounts)
     * for more information.
     *
     * @required
     * @maps amount_money
     */
    public function setAmountMoney(Money $amountMoney): void
    {
        $this->amountMoney = $amountMoney;
    }

    /**
     * Returns Reference Id.
     * An optional user-defined reference ID that can be used to associate
     * this `TerminalCheckout` to another entity in an external system. For example, an order
     * ID generated by a third-party shopping cart. The ID is also associated with any payments
     * used to complete the checkout.
     */
    public function getReferenceId(): ?string
    {
        return $this->referenceId;
    }

    /**
     * Sets Reference Id.
     * An optional user-defined reference ID that can be used to associate
     * this `TerminalCheckout` to another entity in an external system. For example, an order
     * ID generated by a third-party shopping cart. The ID is also associated with any payments
     * used to complete the checkout.
     *
     * @maps reference_id
     */
    public function setReferenceId(?string $referenceId): void
    {
        $this->referenceId = $referenceId;
    }

    /**
     * Returns Note.
     * An optional note to associate with the checkout, as well as with any payments used to complete the
     * checkout.
     * Note: maximum 500 characters
     */
    public function getNote(): ?string
    {
        return $this->note;
    }

    /**
     * Sets Note.
     * An optional note to associate with the checkout, as well as with any payments used to complete the
     * checkout.
     * Note: maximum 500 characters
     *
     * @maps note
     */
    public function setNote(?string $note): void
    {
        $this->note = $note;
    }

    /**
     * Returns Order Id.
     * The reference to the Square order ID for the checkout request.
     */
    public function getOrderId(): ?string
    {
        return $this->orderId;
    }

    /**
     * Sets Order Id.
     * The reference to the Square order ID for the checkout request.
     *
     * @maps order_id
     */
    public function setOrderId(?string $orderId): void
    {
        $this->orderId = $orderId;
    }

    /**
     * Returns Payment Options.
     */
    public function getPaymentOptions(): ?PaymentOptions
    {
        return $this->paymentOptions;
    }

    /**
     * Sets Payment Options.
     *
     * @maps payment_options
     */
    public function setPaymentOptions(?PaymentOptions $paymentOptions): void
    {
        $this->paymentOptions = $paymentOptions;
    }

    /**
     * Returns Device Options.
     */
    public function getDeviceOptions(): TerminalDeviceCheckoutOptions
    {
        return $this->deviceOptions;
    }

    /**
     * Sets Device Options.
     *
     * @required
     * @maps device_options
     */
    public function setDeviceOptions(TerminalDeviceCheckoutOptions $deviceOptions): void
    {
        $this->deviceOptions = $deviceOptions;
    }

    /**
     * Returns Payment Ids.
     * A list of IDs for payments created by this `TerminalCheckout`.
     *
     * @return string[]|null
     */
    public function getPaymentIds(): ?array
    {
        return $this->paymentIds;
    }

    /**
     * Sets Payment Ids.
     * A list of IDs for payments created by this `TerminalCheckout`.
     *
     * @maps payment_ids
     *
     * @param string[]|null $paymentIds
     */
    public function setPaymentIds(?array $paymentIds): void
    {
        $this->paymentIds = $paymentIds;
    }

    /**
     * Returns Payment Type.
     */
    public function getPaymentType(): ?string
    {
        return $this->paymentType;
    }

    /**
     * Sets Payment Type.
     *
     * @maps payment_type
     */
    public function setPaymentType(?string $paymentType): void
    {
        $this->paymentType = $paymentType;
    }

    /**
     * Returns Auxiliary Info.
     * An optional field containing additional information about the payment. Provided field
     * keys and values are validated by Square application code and might be modified in processing the
     * request.
     *
     * @return AuxiliaryInfo[]|null
     */
    public function getAuxiliaryInfo(): ?array
    {
        return $this->auxiliaryInfo;
    }

    /**
     * Sets Auxiliary Info.
     * An optional field containing additional information about the payment. Provided field
     * keys and values are validated by Square application code and might be modified in processing the
     * request.
     *
     * @maps auxiliary_info
     *
     * @param AuxiliaryInfo[]|null $auxiliaryInfo
     */
    public function setAuxiliaryInfo(?array $auxiliaryInfo): void
    {
        $this->auxiliaryInfo = $auxiliaryInfo;
    }

    /**
     * Returns Revenue Association Tags.
     * An optional list of string tags describing Square products or features associated with
     * this checkout. This list is passed to the Terminal to be associated with the payment for internal
     * accounting.
     *
     * @return string[]|null
     */
    public function getRevenueAssociationTags(): ?array
    {
        return $this->revenueAssociationTags;
    }

    /**
     * Sets Revenue Association Tags.
     * An optional list of string tags describing Square products or features associated with
     * this checkout. This list is passed to the Terminal to be associated with the payment for internal
     * accounting.
     *
     * @maps revenue_association_tags
     *
     * @param string[]|null $revenueAssociationTags
     */
    public function setRevenueAssociationTags(?array $revenueAssociationTags): void
    {
        $this->revenueAssociationTags = $revenueAssociationTags;
    }

    /**
     * Returns Team Member Id.
     * An optional ID of the team member associated with creating the checkout.
     */
    public function getTeamMemberId(): ?string
    {
        return $this->teamMemberId;
    }

    /**
     * Sets Team Member Id.
     * An optional ID of the team member associated with creating the checkout.
     *
     * @maps team_member_id
     */
    public function setTeamMemberId(?string $teamMemberId): void
    {
        $this->teamMemberId = $teamMemberId;
    }

    /**
     * Returns Customer Id.
     * An optional ID of the customer associated with the checkout.
     */
    public function getCustomerId(): ?string
    {
        return $this->customerId;
    }

    /**
     * Sets Customer Id.
     * An optional ID of the customer associated with the checkout.
     *
     * @maps customer_id
     */
    public function setCustomerId(?string $customerId): void
    {
        $this->customerId = $customerId;
    }

    /**
     * Returns Cancel Reason Deprecated.
     */
    public function getCancelReasonDeprecated(): ?string
    {
        return $this->cancelReasonDeprecated;
    }

    /**
     * Sets Cancel Reason Deprecated.
     *
     * @maps cancel_reason_deprecated
     */
    public function setCancelReasonDeprecated(?string $cancelReasonDeprecated): void
    {
        $this->cancelReasonDeprecated = $cancelReasonDeprecated;
    }

    /**
     * Returns App Fee Money.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-
     * monetary-amounts)
     * for more information.
     */
    public function getAppFeeMoney(): ?Money
    {
        return $this->appFeeMoney;
    }

    /**
     * Sets App Fee Money.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-
     * monetary-amounts)
     * for more information.
     *
     * @maps app_fee_money
     */
    public function setAppFeeMoney(?Money $appFeeMoney): void
    {
        $this->appFeeMoney = $appFeeMoney;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['amount_money']                 = $this->amountMoney;
        if (isset($this->referenceId)) {
            $json['reference_id']             = $this->referenceId;
        }
        if (isset($this->note)) {
            $json['note']                     = $this->note;
        }
        if (isset($this->orderId)) {
            $json['order_id']                 = $this->orderId;
        }
        if (isset($this->paymentOptions)) {
            $json['payment_options']          = $this->paymentOptions;
        }
        $json['device_options']               = $this->deviceOptions;
        if (isset($this->paymentIds)) {
            $json['payment_ids']              = $this->paymentIds;
        }
        if (isset($this->paymentType)) {
            $json['payment_type']             = $this->paymentType;
        }
        if (isset($this->auxiliaryInfo)) {
            $json['auxiliary_info']           = $this->auxiliaryInfo;
        }
        if (isset($this->revenueAssociationTags)) {
            $json['revenue_association_tags'] = $this->revenueAssociationTags;
        }
        if (isset($this->teamMemberId)) {
            $json['team_member_id']           = $this->teamMemberId;
        }
        if (isset($this->customerId)) {
            $json['customer_id']              = $this->customerId;
        }
        if (isset($this->cancelReasonDeprecated)) {
            $json['cancel_reason_deprecated'] = $this->cancelReasonDeprecated;
        }
        if (isset($this->appFeeMoney)) {
            $json['app_fee_money']            = $this->appFeeMoney;
        }
        $json = array_filter($json, function ($val) {
            return $val !== null;
        });

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
